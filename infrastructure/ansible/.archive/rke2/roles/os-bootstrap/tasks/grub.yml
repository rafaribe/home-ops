---
- name: grub | check for existence of grub
  ansible.builtin.stat:
    path: /etc/default/grub
  register: grub_result

- name: grub | check if apparmor is disabled
  ansible.builtin.shell: grep "GRUB_CMDLINE_LINUX=" /etc/default/grub | grep -c "apparmor=0"
  register: apparmor_status
  ignore_errors: true

- name: grub | check if mitigations is disabled
  ansible.builtin.shell: grep "GRUB_CMDLINE_LINUX=" /etc/default/grub | grep -c "mitigations=off"
  register: mitigations_status
  ignore_errors: true

- name: grub | disable apparmor
  ansible.builtin.replace:
    path: /etc/default/grub
    regexp: '^(GRUB_CMDLINE_LINUX=(?:(?![" ]{{ option | regex_escape }}=).)*)(?:[" ]{{ option | regex_escape }}=\S+)?(.*")$'
    replace: '\1 {{ option }}={{ value }}\2'
  vars:
    option: apparmor
    value: 0
  when:
    - grub_result.stat.exists
    - apparmor_status.stdout == "0"

- name: grub | disable mitigations
  ansible.builtin.replace:
    path: /etc/default/grub
    regexp: '^(GRUB_CMDLINE_LINUX=(?:(?![" ]{{ option | regex_escape }}=).)*)(?:[" ]{{ option | regex_escape }}=\S+)?(.*")$'
    replace: '\1 {{ option }}={{ value }}\2'
  vars:
    option: mitigations
    value: "off"
  when:
    - grub_result.stat.exists
    - mitigations_status.stdout == "0"

- name: grub | run grub-mkconfig
  ansible.builtin.command: update-grub
  when:
    - grub_result.stat.exists
    - apparmor_status.stdout == "0"
    - mitigations_status.stdout == "0"
