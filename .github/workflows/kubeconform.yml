---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "Kubeconform Validation"

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  pull_request:
    branches: ["main"]
    paths: ["kubernetes/**"]
  workflow_dispatch:
    inputs:
      cluster:
        description: 'Cluster to validate'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - main
          - utility
      strict:
        description: 'Strict validation mode'
        required: false
        default: true
        type: boolean

env:
  KUBECONFORM_VERSION: "0.6.4"

permissions:
  contents: read
  pull-requests: write

jobs:
  changed-clusters:
    name: Changed Clusters
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.process-changes.outputs.matrix }}
      any_changed: ${{ steps.changed-clusters.outputs.any_changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Get Changed Clusters
        id: changed-clusters
        uses: JJGadgets/tj-actions-changed-files@9200e69727eb73eb060652b19946b8a2fdfb654b
        with:
          files: kubernetes/**
          dir_names: true
          dir_names_max_depth: 2
          matrix: true

      - name: Process Changes
        id: process-changes
        run: |
          if [ "${{ github.event.inputs.cluster }}" = "all" ] || [ "${{ github.event_name }}" = "schedule" ]; then
            echo 'matrix=["main", "utility"]' >> "$GITHUB_OUTPUT"
          elif [ -n "${{ github.event.inputs.cluster }}" ] && [ "${{ github.event.inputs.cluster }}" != "all" ]; then
            echo 'matrix=["${{ github.event.inputs.cluster }}"]' >> "$GITHUB_OUTPUT"
          else
            changed=$(echo '${{ steps.changed-clusters.outputs.all_changed_and_modified_files }}' | jq -r '. | @json')
            if echo "$changed" | grep -q "kubernetes/shared"; then
              echo 'matrix=["main", "utility"]' >> "$GITHUB_OUTPUT"
            else
              if [[ "$changed" == "["*"]" ]]; then
                echo "matrix=$changed" >> "$GITHUB_OUTPUT"
              else
                echo 'matrix=["main", "utility"]' >> "$GITHUB_OUTPUT"
              fi
            fi
          fi

  kubeconform-validate:
    name: Kubeconform Validation
    runs-on: ["arc-runner-set-home-ops"]
    needs: changed-clusters
    if: always()
    
    strategy:
      matrix:
        cluster: ${{ fromJSON(needs.changed-clusters.outputs.matrix) }}
      fail-fast: false
    
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          token: "${{ steps.app-token.outputs.token }}"

      - name: Write kubeconfig
        id: kubeconfig
        uses: timheuer/base64-to-file@adaa40c0c581f276132199d4cf60afa07ce60eac # v1
        with:
          encodedString: "${{ secrets.KUBECONFIG }}"
          fileName: kubeconfig

      - name: Install kubeconform
        run: |
          curl -L https://github.com/yannh/kubeconform/releases/download/v${KUBECONFORM_VERSION}/kubeconform-linux-amd64.tar.gz -o kubeconform.tar.gz
          tar -xzf kubeconform.tar.gz
          chmod +x kubeconform
          sudo mv kubeconform /usr/local/bin/

      - name: Create results directory
        run: mkdir -p kubeconform-results/${{ matrix.cluster }}

      - name: Validate static manifests
        run: |
          CLUSTER="${{ matrix.cluster }}"
          STRICT_MODE="${{ github.event.inputs.strict || 'true' }}"
          
          echo "=== Validating static manifests for $CLUSTER cluster ==="
          
          # Find all YAML files in the cluster directory
          if [ -d "kubernetes/$CLUSTER" ]; then
            find kubernetes/$CLUSTER -name "*.yaml" -o -name "*.yml" | while read -r file; do
              echo "Validating: $file"
              if [ "$STRICT_MODE" = "true" ]; then
                kubeconform -strict -summary -output json "$file" >> kubeconform-results/$CLUSTER/static-results.json 2>&1 || true
              else
                kubeconform -summary -output json "$file" >> kubeconform-results/$CLUSTER/static-results.json 2>&1 || true
              fi
            done
          fi
          
          # Also validate shared resources if they exist
          if [ -d "kubernetes/shared" ]; then
            find kubernetes/shared -name "*.yaml" -o -name "*.yml" | while read -r file; do
              echo "Validating shared: $file"
              if [ "$STRICT_MODE" = "true" ]; then
                kubeconform -strict -summary -output json "$file" >> kubeconform-results/$CLUSTER/shared-results.json 2>&1 || true
              else
                kubeconform -summary -output json "$file" >> kubeconform-results/$CLUSTER/shared-results.json 2>&1 || true
              fi
            done
          fi

      - name: Validate live cluster resources
        env:
          KUBECONFIG: "${{ steps.kubeconfig.outputs.filePath }}"
        run: |
          CLUSTER="${{ matrix.cluster }}"
          STRICT_MODE="${{ github.event.inputs.strict || 'true' }}"
          
          echo "=== Validating live resources in $CLUSTER cluster ==="
          
          # Get all resources from the cluster and validate them
          kubectl --context "$CLUSTER" get all --all-namespaces -o yaml > kubeconform-results/$CLUSTER/live-resources.yaml
          
          if [ "$STRICT_MODE" = "true" ]; then
            kubeconform -strict -summary -output json kubeconform-results/$CLUSTER/live-resources.yaml > kubeconform-results/$CLUSTER/live-results.json 2>&1 || true
          else
            kubeconform -summary -output json kubeconform-results/$CLUSTER/live-resources.yaml > kubeconform-results/$CLUSTER/live-results.json 2>&1 || true
          fi

      - name: Generate cluster state report
        env:
          KUBECONFIG: "${{ steps.kubeconfig.outputs.filePath }}"
        run: |
          CLUSTER="${{ matrix.cluster }}"
          
          echo "=== Generating cluster state report for $CLUSTER ==="
          
          # Create comprehensive cluster state report
          {
            echo "# Cluster State Report - $CLUSTER"
            echo "Generated: $(date -u)"
            echo ""
            
            echo "## Cluster Info"
            kubectl --context "$CLUSTER" cluster-info || true
            echo ""
            
            echo "## Node Status"
            kubectl --context "$CLUSTER" get nodes -o wide || true
            echo ""
            
            echo "## Namespace Summary"
            kubectl --context "$CLUSTER" get namespaces || true
            echo ""
            
            echo "## Pod Status by Namespace"
            kubectl --context "$CLUSTER" get pods --all-namespaces --field-selector=status.phase!=Running,status.phase!=Succeeded || true
            echo ""
            
            echo "## Resource Usage"
            kubectl --context "$CLUSTER" top nodes || true
            echo ""
            kubectl --context "$CLUSTER" top pods --all-namespaces --sort-by=memory || true
            echo ""
            
            echo "## Events (Last 1 hour)"
            kubectl --context "$CLUSTER" get events --all-namespaces --sort-by='.lastTimestamp' | tail -50 || true
            echo ""
            
            echo "## Persistent Volumes"
            kubectl --context "$CLUSTER" get pv,pvc --all-namespaces || true
            echo ""
            
            echo "## Services and Ingress"
            kubectl --context "$CLUSTER" get svc,ingress --all-namespaces || true
            
          } > kubeconform-results/$CLUSTER/cluster-state.md

      - name: Parse validation results
        run: |
          CLUSTER="${{ matrix.cluster }}"
          
          echo "=== Validation Summary for $CLUSTER ==="
          
          # Parse and summarize results
          {
            echo "# Validation Summary - $CLUSTER"
            echo "Generated: $(date -u)"
            echo ""
            
            if [ -f kubeconform-results/$CLUSTER/static-results.json ]; then
              echo "## Static Manifest Validation"
              echo "Results from static YAML files in kubernetes/$CLUSTER/"
              cat kubeconform-results/$CLUSTER/static-results.json | jq -r 'select(.summary) | "Valid: \(.summary.valid // 0), Invalid: \(.summary.invalid // 0), Errors: \(.summary.errors // 0), Skipped: \(.summary.skipped // 0)"' || echo "No summary available"
              echo ""
            fi
            
            if [ -f kubeconform-results/$CLUSTER/shared-results.json ]; then
              echo "## Shared Resources Validation"
              echo "Results from shared YAML files in kubernetes/shared/"
              cat kubeconform-results/$CLUSTER/shared-results.json | jq -r 'select(.summary) | "Valid: \(.summary.valid // 0), Invalid: \(.summary.invalid // 0), Errors: \(.summary.errors // 0), Skipped: \(.summary.skipped // 0)"' || echo "No summary available"
              echo ""
            fi
            
            if [ -f kubeconform-results/$CLUSTER/live-results.json ]; then
              echo "## Live Cluster Validation"
              echo "Results from resources currently running in the cluster"
              cat kubeconform-results/$CLUSTER/live-results.json | jq -r 'select(.summary) | "Valid: \(.summary.valid // 0), Invalid: \(.summary.invalid // 0), Errors: \(.summary.errors // 0), Skipped: \(.summary.skipped // 0)"' || echo "No summary available"
              echo ""
            fi
            
            echo "## Validation Errors"
            if [ -f kubeconform-results/$CLUSTER/static-results.json ]; then
              echo "### Static Manifest Errors"
              cat kubeconform-results/$CLUSTER/static-results.json | jq -r 'select(.status == "statusError") | "- \(.filename): \(.msg)"' || echo "No errors found"
            fi
            
            if [ -f kubeconform-results/$CLUSTER/live-results.json ]; then
              echo "### Live Resource Errors"
              cat kubeconform-results/$CLUSTER/live-results.json | jq -r 'select(.status == "statusError") | "- \(.filename): \(.msg)"' || echo "No errors found"
            fi
            
          } > kubeconform-results/$CLUSTER/validation-summary.md
          
          # Display summary in logs
          cat kubeconform-results/$CLUSTER/validation-summary.md

      - name: Upload validation results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: kubeconform-results-${{ matrix.cluster }}-${{ github.run_number }}
          path: kubeconform-results/${{ matrix.cluster }}/
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const fs = require('fs');
            const cluster = '${{ matrix.cluster }}';
            
            if (fs.existsSync(`kubeconform-results/${cluster}/validation-summary.md`)) {
              const summary = fs.readFileSync(`kubeconform-results/${cluster}/validation-summary.md`, 'utf8');
              
              const comment = `## 🔍 Kubeconform Validation Results - ${cluster.toUpperCase()}
              
              <details>
              <summary>Click to expand validation summary</summary>
              
              \`\`\`
              ${summary}
              \`\`\`
              
              </details>
              
              📊 [View detailed results](${context.payload.repository.html_url}/actions/runs/${context.runId})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  success:
    if: ${{ !cancelled() }}
    needs: ["kubeconform-validate"]
    name: Kubeconform Validation - Success
    runs-on: ubuntu-latest
    steps:
      - name: Check validation results
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "::error::Kubeconform validation failed for one or more clusters"
          exit 1

      - name: All validations passed
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: echo "All kubeconform validations passed or were skipped"
