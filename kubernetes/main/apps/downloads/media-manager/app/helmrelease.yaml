---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app media-manager
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 4.2.0
      interval: 30m
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system

  values:
    controllers:
      media-manager:
        annotations:
          reloader.stakater.com/auto: "true"

        pod:
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
            fsGroupChangePolicy: "OnRootMismatch"

        containers:
          backend:
            image:
              repository: ghcr.io/maxdorninger/mediamanager/backend
              tag: latest
            env:
              CONFIG_FILE: /app/config.toml
            probes:
              liveness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/v1/health
                    port: 8000
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  timeoutSeconds: 5
                  failureThreshold: 3
              readiness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/v1/health
                    port: 8000
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
            resources:
              requests:
                cpu: 50m
                memory: 256M
              limits:
                memory: 1Gi

          frontend:
            image:
              repository: ghcr.io/maxdorninger/mediamanager/frontend
              tag: latest
            env:
              PUBLIC_API_URL: http://media-manager.downloads.svc.cluster.local:8000/api/v1
            probes:
              liveness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /
                    port: 3000
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  timeoutSeconds: 5
                  failureThreshold: 3
              readiness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /
                    port: 3000
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
            resources:
              requests:
                cpu: 25m
                memory: 128M
              limits:
                memory: 512M

          db:
            image:
              repository: postgres
              tag: "16-alpine"
            env:
              POSTGRES_USER: MediaManager
              POSTGRES_DB: MediaManager
              POSTGRES_PASSWORD: MediaManager
              PGDATA: /var/lib/postgresql/data/pgdata
            probes:
              liveness:
                enabled: true
                custom: true
                spec:
                  exec:
                    command:
                      - /bin/sh
                      - -c
                      - pg_isready -d MediaManager -U MediaManager
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  timeoutSeconds: 5
                  failureThreshold: 3
              readiness:
                enabled: true
                custom: true
                spec:
                  exec:
                    command:
                      - /bin/sh
                      - -c
                      - pg_isready -d MediaManager -U MediaManager
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  timeoutSeconds: 5
                  failureThreshold: 3
            resources:
              requests:
                cpu: 50m
                memory: 256M
              limits:
                memory: 1Gi

    service:
      frontend:
        controller: *app
        ports:
          http:
            port: 3000
            targetPort: 3000
      backend:
        controller: *app
        ports:
          http:
            port: 8000
            targetPort: 8000
      db:
        controller: *app
        ports:
          postgres:
            port: 5432
            targetPort: 5432

    route:
      app:
        annotations:
          external-dns.alpha.kubernetes.io/target: "internal.rafaribe.com"
        hostnames: ["mm.rafaribe.com", "media-manager.rafaribe.com"]
        parentRefs:
          - name: internal
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - name: media-manager-frontend
                port: 3000

    configMaps:
      config:
        data:
          config.toml: |
            # MediaManager Complete Configuration File
            # This file contains all available configuration options for MediaManager
            # Documentation: https://maxdorninger.github.io/MediaManager/introduction.html

            [misc]
            # Frontend URL - adjust to your domain
            frontend_url = "https://mm.rafaribe.com/"
            cors_urls = ["https://mm.rafaribe.com", "https://media-manager.rafaribe.com"]

            # API configuration
            api_base_path = "/api/v1"
            development = false

            [database]
            host = "localhost"
            port = 5432
            user = "MediaManager"
            password = "MediaManager"
            dbname = "MediaManager"

            [auth]
            email_password_resets = false

            # Generate a random token secret with: openssl rand -hex 32
            token_secret = "your-random-32-char-hex-string-here-change-this"
            session_lifetime = 86400  # 24 hours in seconds
            admin_emails = ["admin@rafaribe.com"]

                # OpenID Connect settings (disabled by default)
                [auth.openid_connect]
                enabled = false
                client_id = ""
                client_secret = ""
                configuration_endpoint = ""
                name = "OpenID"

            [notifications]
                # SMTP settings for email notifications and password resets
                [notifications.smtp_config]
                smtp_host = "smtp.example.com"
                smtp_port = 587
                smtp_user = "admin"
                smtp_password = "admin"
                from_email = "mediamanager@rafaribe.com"
                use_tls = true

                # Email notification settings
                [notifications.email_notifications]
                enabled = false
                emails = ["admin@rafaribe.com"]

                # Gotify notification settings
                [notifications.gotify]
                enabled = false
                api_key = ""
                url = ""

                # Ntfy notification settings
                [notifications.ntfy]
                enabled = false
                url = ""

                # Pushover notification settings
                [notifications.pushover]
                enabled = false
                api_key = ""
                user = ""

            [torrents]
                # qBittorrent settings
                [torrents.qbittorrent]
                enabled = false
                host = "http://localhost"
                port = 8080
                username = "admin"
                password = "admin"

                # SABnzbd settings
                [torrents.sabnzbd]
                enabled = false
                host = "localhost"
                port = 8080
                api_key = ""

            [indexers]
                # Prowlarr settings
                [indexers.prowlarr]
                enabled = false
                url = "http://localhost:9696"
                api_key = ""

                # Jackett settings
                [indexers.jackett]
                enabled = false
                url = "http://localhost:9117"
                api_key = ""
                indexers = ["1337x"]

            # Metadata relay configuration (usually doesn't need changes)
            [metadata]
                [metadata.tmdb]
                tmdb_relay_url = "https://metadata-relay.maxid.me/tmdb"

                [metadata.tvdb]
                tvdb_relay_url = "https://metadata-relay.maxid.me/tvdb"

    persistence:
      data:
        existingClaim: *app
        globalMounts:
          - path: /data
      postgres-data:
        type: emptyDir
        globalMounts:
          - path: /var/lib/postgresql/data
            subPath: pgdata
      config:
        type: configMap
        name: media-manager-config
        globalMounts:
          - path: /app/config.toml
            subPath: config.toml
      media:
        type: nfs
        server: truenas.rafaribe.com
        path: /mnt/tank/media
        globalMounts:
          - path: /media