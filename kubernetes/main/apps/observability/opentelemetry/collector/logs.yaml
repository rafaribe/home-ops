---
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel-filelog
spec:
  managementState: managed
  upgradeStrategy: automatic
  mode: daemonset
  serviceAccount: collector
  ports:
    - name: health
      port: 13113
  env:
    - name: KUBE_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  config:
    receivers:
      filelog:
        include:
          - /var/log/pods/*/*/*.log
        exclude:
          # Excluding volsync and actions pods as they execute way too fast
          - /var/log/pods/*volsync*/*/*.log
          - /var/log/pods/*actions*/*/*.log
        include_file_path: true
        include_file_name: true
        operators:
          # Find out which format is used by kubernetes
          - type: router
            id: get-format
            routes:
              - output: parser-docker
                expr: 'body matches "^\\{"'
              - output: parser-crio
                expr: 'body matches "^[^ Z]+ "'
              - output: parser-containerd
                expr: 'body matches "^[^ Z]+Z"'
          # Parse CRI-O format
          - type: regex_parser
            id: parser-crio
            regex: "^(?P<timestamp>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<message>.*)$"
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.timestamp
              layout_type: gotime
              layout: "2006-01-02T15:04:05.999999999Z07:00"
          # Parse CRI-Containerd format
          - type: regex_parser
            id: parser-containerd
            regex: "^(?P<timestamp>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<message>.*)$"
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.timestamp
              layout: "%Y-%m-%dT%H:%M:%S.%LZ"
          # Parse Docker format
          - type: json_parser
            id: parser-docker
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.timestamp
              layout: "%Y-%m-%dT%H:%M:%S.%LZ"
          - type: move
            from: attributes.message
            to: body
          # Extract metadata from file path
          - type: regex_parser
            id: extract_metadata_from_filepath
            regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
            parse_from: attributes["log.file.path"]
            cache:
              # default maximum amount of Pods per Node is 110
              size: 128
          # Rename attributes
          - type: move
            from: attributes.container_name
            to: resource["k8s.container.name"]
          - type: move
            from: attributes.namespace
            to: resource["k8s.namespace.name"]
          - type: move
            from: attributes.pod_name
            to: resource["k8s.pod.name"]

    processors:
      batch:
        timeout: 1s
        send_batch_size: 100
        send_batch_max_size: 500
      k8sattributes:
        passthrough: false
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.name
        extract:
          metadata:
            - k8s.cluster.uid
            - k8s.namespace.name
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.node.name
            - k8s.pod.start_time
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.replicaset.uid
            - k8s.daemonset.name
            - k8s.daemonset.uid
            - k8s.job.name
            - k8s.job.uid
            - k8s.cronjob.name
            - k8s.statefulset.name
            - k8s.statefulset.uid
            - container.image.tag
            - container.image.name
      transform:
        error_mode: ignore
        log_statements:
          - context: resource
            statements:
              - set(attributes["host"], attributes["k8s.node.name"])
              - set(attributes["type"], "log")
              - set(attributes["source"], "OpenTelemetry Collector")
    exporters:
      loki:
        endpoint: http://loki-headless.observability.svc.cluster.local:3100/loki/api/v1/push
        default_labels_enabled:
          exporter: false
    service:
      pipelines:
        logs:
          receivers: [filelog]
          processors: [batch, k8sattributes, transform]
          exporters: [loki]
  securityContext:
    runAsUser: 0
    runAsGroup: 0
  volumeMounts:
    - name: pods
      mountPath: /var/log/pods
      readOnly: true
  volumes:
    - name: pods
      hostPath:
        path: /var/log/pods
