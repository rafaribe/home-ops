---
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otel-collector
spec:
  mode: daemonset
  image: otel/opentelemetry-collector-contrib:0.103.1
  volumeMounts:
    - name: pods
      mountPath: /var/log/pods
      readOnly: true
    - name: scratchdir
      mountPath: /var/lib/otelcol
  volumes:
    - name: scratchdir
      emptyDir:
        sizeLimit: 10Gi
    - name: pods
      hostPath:
        path: /var/log/pods
  resources:
    limits:
      cpu: 200m
      memory: 500Mi
  podSecurityContext:
    runAsUser: 0
    runAsNonRoot: false
    runAsGroup: 0
  serviceAccount: collector
  env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: K8S_POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
  config: |
    receivers:
      filelog:
        include:
          - /var/log/pods/*/*/*.log
        exclude:
          # Exclude logs from all containers named otel-collector
          - /var/log/pods/*/otel-collector/*.log
        include_file_path: true
        include_file_name: false
        operators:
          - type: regex_parser
            regex: '^(?P<timestamp>.+?) (?P<streamm>stdout|stderr) (?P<flag>[A-Z]{1}) (?P<log>.*)$'
            id: pre_process
            on_error: drop
          - type: move
            from: attributes.log
            to: body
          # Extract metadata from file path
          - type: regex_parser
            id: extract_metadata_from_filepath
            regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
            parse_from: attributes["log.file.path"]
          - type: recombine
            combine_field: body
            is_first_entry: body matches "^[^\\s]"
            source_identifier: attributes["log.file.path"]
          # Rename attributes
          - type: move
            from: attributes.streamm
            to: resource["log.iostream"]
          - type: copy
            from: attributes.namespace
            to: resource["service.namespace"]
          - type: copy
            from: attributes.container_name
            to: resource["service.name"]
          - type: move
            from: attributes.container_name
            to: resource["k8s.container.name"]
          - type: move
            from: attributes.namespace
            to: resource["k8s.namespace.name"]
          - type: move
            from: attributes.pod_name
            to: resource["k8s.pod.name"]
          - type: move
            from: attributes.restart_count
            to: resource["k8s.container.restart_count"]
          - type: move
            from: attributes.uid
            to: resource["k8s.pod.uid"]
          - type: move
            from: attributes.uid
            to: resource["k8s.deployment.name"]
    processors:
      batch:
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata: # extracted from the pod
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time
          # Pod labels which can be fetched via K8sattributeprocessor
          labels:
            - tag_name: app
              key: app.kubernetes.io/name
              from: pod
            - tag_name:
              key: app.kubernetes.io/version
              from: pod
        # Pod association using resource attributes and connection
        pod_association:
          - sources:
             - from: resource_attribute
               name: k8s.pod.uid
             - from: resource_attribute
               name: k8s.pod.name
          - sources:
             - from: connection
      memory_limiter:
        check_interval: 1s
        limit_percentage: 70
        spike_limit_percentage: 30
    exporters:
      loki:
        endpoint: http://loki-gateway/loki/api/v1/push
    service:
      pipelines:
        logs:
          receivers: [filelog]
          processors: [k8sattributes,batch,memory_limiter]
          exporters: [loki]
