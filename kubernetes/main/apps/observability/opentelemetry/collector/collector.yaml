---
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: collector
spec:
  mode: daemonset
  serviceAccount: collector
  ports:
    - name: health
      port: 13133 # Changed the health check port to 13133
  env:
    - name: KUBE_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  config: |
    receivers:
      filelog:
        include:
          - /var/log/pods/*/*/*.log
        exclude:
          - /var/log/pods/*/otel-collector/*.log
        include_file_path: true
        include_file_name: false
        operators:
          - type: regex_parser
            regex: '^(?P<timestamp>.+?) (?P<stream>stdout|stderr) (?P<flag>[A-Z]{1}) (?P<log>.*)$'  # Fixed the regex pattern
            id: pre_process
            on_error: drop
          - type: move
            from: attributes.log
            to: body
          - type: regex_parser
            id: extract_metadata_from_filepath
            regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log'
            parse_from: attributes["log.file.path"]
          - type: recombine
            combine_field: body
            is_first_entry: body matches "^[^\\s]"
            source_identifier: attributes["log.file.path"]
          - type: move
            from: attributes.stream
            to: resource["log.iostream"]  # Fixed the attribute name
          - type: copy
            from: attributes.namespace
            to: resource["service.namespace"]
          - type: copy
            from: attributes.container_name
            to: resource["service.name"]
          - type: move
            from: attributes.container_name
            to: resource["k8s.container.name"]
          - type: move
            from: attributes.namespace
            to: resource["k8s.namespace.name"]
          - type: move
            from: attributes.pod_name
            to: resource["k8s.pod.name"]
          - type: move
            from: attributes.restart_count
            to: resource["k8s.container.restart_count"]
          - type: move
            from: attributes.uid
            to: resource["k8s.pod.uid"]
      prometheus:
        config:
          scrape_configs:
            - job_name: "otel-collector"
              scrape_interval: 10s
              static_configs:
                - targets: ["0.0.0.0:8888"]
              metric_relabel_configs:
                - action: labeldrop
                  regex: (id|name)
                  replacement: $1
                - action: labelmap
                  regex: label_(.+)
                  replacement: $1
      k8s_events: {}
      otlp:
        protocols:
          grpc: {}
          http: {}
    processors:
      batch: {}
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time
          labels:
            - tag_name: key1
              key: label1
              from: pod
            - tag_name: key2
              key: label2
              from: pod
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
              - from: resource_attribute
                name: k8s.pod.name
          - sources:
              - from: connection
      memory_limiter:
        check_interval: 1s
        limit_percentage: 70
        spike_limit_percentage: 30
    exporters:
      prometheusremotewrite:
        endpoint: http://mimir-nginx/api/v1/write
      loki:
        endpoint: "http://loki-gateway/loki/api/v1/push"
    service:
      pipelines:
        metrics:
          receivers: [otlp, prometheus]
          processors: [batch, memory_limiter]
          exporters: [prometheusremotewrite]
        logs:
          receivers: [filelog]
          processors: [k8sattributes, batch, memory_limiter]
          exporters: [loki]
  volumeMounts:
    - name: pods
      mountPath: /var/log/pods
      readOnly: true
  volumes:
    - name: pods
      hostPath:
        path: /var/log/pods
