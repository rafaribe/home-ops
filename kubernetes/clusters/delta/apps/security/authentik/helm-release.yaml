apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: authentik
  namespace: security
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://charts.goauthentik.io
      chart: authentik
      version: 2022.10.0
      sourceRef:
        kind: HelmRepository
        name: authentik-charts
        namespace: flux-system
      interval: 5m
  values:
    image:
      repository: ghcr.io/goauthentik/server
      pullPolicy: IfNotPresent
    env:
      AUTHENTIK_INSECURE: true
    serviceAccount:
      create: false
    
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
          nginx.ingress.kubernetes.io/router.entrypoints: websecure
          nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
          nginx.org/websocket-services: authentik
          nginx.ingress.kubernetes.io/enable-global-auth: "false"
          cert-manager.io/cluster-issuer: letsencrypt-production
          external-dns.alpha.kubernetes.io/hostname: authentik.${EXTERNAL_DOMAIN}
          external-dns.alpha.kubernetes.io/target: ${EXTERNAL_DOMAIN}
          hajimari.io/enable: "true"
          hajimari.io/icon: "shield-account-variant"
          hajimari.io/appName: "Authentik"
      hosts:
      - host: authentik.${EXTERNAL_DOMAIN}
        paths:
        - path: /
      tls:
      - hosts:
        - authentik.${EXTERNAL_DOMAIN}
    # Password in clear text because this is a random test instance
    authentik:
      secret_key: ${AUTHENTIK_SECRET}
      log_level: debug
      error_reporting:
        enabled: true
      outposts:
        docker_image_base: ghcr.io/goauthentik/%(type)s:%(version)s
      postgresql:
        # Should be present on the secret created by the postgres operator
        host: authentik-rw.security.svc.cluster.local
        name: app
        user: app
        password: ${AUTHENTIK_PG_PASSWORD}

    postgresql:
      enabled: false

    redis:
      enabled: true
      persistence:
        enabled: false
      auth:
        enabled: false

    prometheus:
      serviceMonitor:
        create: true
        interval: 30s
        scrapeTimeout: 3s
      rules:
        create: true
