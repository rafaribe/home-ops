---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kyverno-policies
  namespace: kube-tools
spec:
  interval: 15m
  chart:
    spec:
      chart: raw
      version: v0.3.1
      sourceRef:
        kind: HelmRepository
        name: dysnix-charts
        namespace: flux-system
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  dependsOn:
    - name: kyverno
      namespace: kyverno
  values:
    resources:
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: kyverno:admin
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
          - kind: ServiceAccount
            name: kyverno
            namespace: kyverno
      - apiVersion: kyverno.io/v1
        kind: ClusterPolicy
        metadata:
          name: apply-ingress-auth-annotations
          annotations:
            policies.kyverno.io/title: Apply Ingress Auth Annotations
            policies.kyverno.io/subject: Ingress
            policies.kyverno.io/description: >-
              This policy creates auth annotations on ingresses. When
              the `auth.home.arpa/enabled` annotation is `true` it
              applies the nginx auth annotations for use with Authentik.
        spec:
          mutateExistingOnPolicyUpdate: true
          generateExistingOnPolicyUpdate: true
          rules:
            - name: auth
              match:
                any:
                  - resources:
                      kinds: ["Ingress"]
                      annotations:
                        auth.home.arpa/enabled: "true"
              mutate:
                patchStrategicMerge:
                  metadata:
                    annotations:
                      +(nginx.ingress.kubernetes.io/auth-url): |-
                        http://ak-outpost-authentik-embedded-outpost.security.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
                      +(nginx.ingress.kubernetes.io/auth-signin): |-
                        https://authentik.${EXTERNAL_DOMAIN}//outpost.goauthentik.io/start?rd=$escaped_request_uri
                      +(nginx.ingress.kubernetes.io/auth-response-headers): |-
                        Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
                      +(nginx.ingress.kubernetes.io/auth-snippet): |
                        proxy_set_header X-Forwarded-Host $http_host;
      - apiVersion: kyverno.io/v1
        kind: ClusterPolicy
        metadata:
          name: themepark-skin
          annotations:
            policies.kyverno.io/title: ThemePark Skin
            policies.kyverno.io/subject: Ingress
            policies.kyverno.io/description: |
              This policy applies an ingress notation that will apply a theme-park theme.
              You will need two labels on the ingress:
              - "theme-park.home/name" should match the name of the application on theme park, for example calibre-web should be calibreweb
              - "theme-park.home/theme": should match the theme that you want, and will default to onedark if not specified.
        spec:
          mutateExistingOnPolicyUpdate: true
          generateExistingOnPolicyUpdate: true
          rules:
            - name: theme
              context:
                - name: appName
                  variable:
                    jmesPath: 'request.object.metadata.labels."theme-park.home/name"'
                - name: theme
                  variable:
                    jmesPath: 'request.object.metadata.labels."theme-park.home/theme" || onedark'
              match:
                any:
                  - resources:
                      kinds: ["Ingress"]
                      annotations:
                        theme.home.arpa/enabled: "true"
              mutate:
                patchStrategicMerge:
                  metadata:
                    annotations:
                      +(nginx.ingress.kubernetes.io/configuration-snippet): |-
                        proxy_set_header Accept-Encoding "";
                        sub_filter '</head>' '<link rel="stylesheet" type="text/css" href="https://themepark.${EXTERNAL_DOMAIN}/css/base/{{ appName }}/{{ theme }}.css"></head>';
                        sub_filter_once on;
      - apiVersion: kyverno.io/v1
        kind: ClusterPolicy
        metadata:
          name: external-dns-annotation
          annotations:
            policies.kyverno.io/title: Apply external-dns annotation with target to the ${EXTERNAL_DOMAIN}
            policies.kyverno.io/subject: Ingress
            policies.kyverno.io/description: >-
              This policy creates an external-dns.alpha.kubernetes.io/target: ${EXTERNAL_DOMAIN}
              when there is an external-dns.alpha.kubernetes.io/hostname present, ensuring that external-dns
              creates a CNAME record that is proxied.
        spec:
          mutateExistingOnPolicyUpdate: true
          generateExistingOnPolicyUpdate: true
          rules:
            - name: external-dns
              match:
                any:
                  - resources:
                      kinds: ["Ingress"]
              mutate:
                patchStrategicMerge:
                  metadata:
                    annotations:
                      +(external-dns.alpha.kubernetes.io/target): |-
                        ${EXTERNAL_DOMAIN}
