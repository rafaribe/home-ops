---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: volsync-snapshot-sync
  namespace: home
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: volsync-snapshot-sync
  namespace: home
rules:
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "create", "delete"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshots"]
  verbs: ["get", "list"]
- apiGroups: ["postgresql.cnpg.io"]
  resources: ["backups"]
  verbs: ["get", "list"]
- apiGroups: ["volsync.backube"]
  resources: ["replicationsources"]
  verbs: ["get", "list", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: volsync-snapshot-sync
  namespace: home
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: volsync-snapshot-sync
subjects:
- kind: ServiceAccount
  name: volsync-snapshot-sync
  namespace: home
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: volsync-snapshot-sync
  namespace: home
spec:
  schedule: "0 5 * * *"  # Run at 05:00, 2 hours after backup
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: volsync-snapshot-sync
          restartPolicy: OnFailure
          containers:
          - name: sync
            image: bitnami/kubectl:latest
            command:
            - /bin/bash
            - -c
            - |
              set -e
              
              echo "Finding latest successful backup..."
              LATEST_BACKUP=$(kubectl get backup -n home \
                --sort-by=.metadata.creationTimestamp \
                -o jsonpath='{.items[?(@.status.phase=="completed")].metadata.name}' | \
                tr ' ' '\n' | tail -1)
              
              if [ -z "$LATEST_BACKUP" ]; then
                echo "No completed backups found"
                exit 1
              fi
              
              echo "Latest backup: $LATEST_BACKUP"
              
              # Find the volume snapshot created by this backup
              SNAPSHOT_NAME=$(kubectl get backup $LATEST_BACKUP -n home \
                -o jsonpath='{.status.backupName}' 2>/dev/null || echo "$LATEST_BACKUP")
              
              echo "Looking for volume snapshot: $SNAPSHOT_NAME"
              
              # Check if snapshot exists and is ready
              if kubectl get volumesnapshot $SNAPSHOT_NAME -n home >/dev/null 2>&1; then
                SNAPSHOT_READY=$(kubectl get volumesnapshot $SNAPSHOT_NAME -n home \
                  -o jsonpath='{.status.readyToUse}')
                
                if [ "$SNAPSHOT_READY" = "true" ]; then
                  echo "Creating PVC from snapshot $SNAPSHOT_NAME for VolSync..."
                  
                  # Create a temporary PVC from the snapshot for VolSync to use
                  cat <<EOF | kubectl apply -f -
              apiVersion: v1
              kind: PersistentVolumeClaim
              metadata:
                name: immich-db-backup-pvc
                namespace: home
                labels:
                  volsync-source: "true"
                  backup-snapshot: "$SNAPSHOT_NAME"
              spec:
                accessModes:
                  - ReadWriteOnce
                storageClassName: ceph-block
                resources:
                  requests:
                    storage: 100Gi
                dataSource:
                  name: $SNAPSHOT_NAME
                  kind: VolumeSnapshot
                  apiGroup: snapshot.storage.k8s.io
              EOF
                  
                  echo "PVC created successfully from backup snapshot"
                else
                  echo "Snapshot $SNAPSHOT_NAME is not ready yet"
                  exit 1
                fi
              else
                echo "Snapshot $SNAPSHOT_NAME not found"
                exit 1
              fi
